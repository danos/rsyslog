--- a/runtime/nsd_ossl.c
+++ b/runtime/nsd_ossl.c
@@ -29,6 +29,7 @@
 #include <assert.h>
 #include <string.h>
 #include <openssl/ssl.h>
+#include <openssl/ocsp.h>
 #include <openssl/x509v3.h>
 #include <openssl/err.h>
 #include <openssl/engine.h>
@@ -1355,6 +1356,256 @@
 	RETiRet;
 }
 
+rsRetVal
+osslOCSPREQ(nsd_ossl_ocsp_request_t *request_state)
+{
+	DEFiRet;
+	switch (request_state->Action) {
+	case OCSPREQ_BASIC_VALIDATION:
+	{
+		X509 *issuer = request_state->issuer;
+		X509 *cert = request_state->cert;
+		STACK_OF(X509) *sk = request_state->sk;
+		X509_STORE *store = request_state->X509store;
+		BIO *bio = NULL;
+		OCSP_RESPONSE *rsp = NULL;
+		OCSP_REQUEST *req = NULL;
+		OCSP_CERTID *id;
+		STACK_OF(OCSP_CERTID) *ids = NULL;
+		OCSP_REQ_CTX *reqctx = NULL;
+
+		int use_ssl = -1, rv = -1;
+		char *host = NULL, *path = NULL, *port = NULL;
+
+		if (sk_OPENSSL_STRING_num(request_state->Responder) == 0)
+			ABORT_FINALIZE(RS_RET_NO_ERRCODE);
+
+		char *url = sk_OPENSSL_STRING_value(request_state->Responder, 0);
+		if (!OCSP_parse_url(url, &host, &port, &path, &use_ssl))
+			ABORT_FINALIZE(RS_RET_NO_ERRCODE);
+		req = OCSP_REQUEST_new();
+		if (req == NULL)
+			ABORT_FINALIZE(RS_RET_NO_ERRCODE);
+
+		ids = sk_OCSP_CERTID_new_null();
+		const EVP_MD *cert_id_md = EVP_sha1();
+
+		id = OCSP_cert_to_id(cert_id_md, cert, issuer);
+		if (!id || !sk_OCSP_CERTID_push(ids, id))
+			ABORT_FINALIZE(RS_RET_NO_ERRCODE);
+		if (!OCSP_request_add0_id(req, id))
+			ABORT_FINALIZE(RS_RET_NO_ERRCODE);
+
+		bio = BIO_new_connect(host);
+		if (bio == NULL)
+			ABORT_FINALIZE(RS_RET_ERR);
+
+		if (port)
+			BIO_set_conn_port(bio, port);
+
+		rv = BIO_do_connect(bio);
+		/* Try next URI */
+		if (rv <= 0) {
+			sk_OPENSSL_STRING_pop(request_state->Responder);
+			CHKiRet(osslOCSPREQ(request_state));
+			goto finalize_it;
+		}
+
+		reqctx = OCSP_sendreq_new(bio, path, NULL, -1);
+		if (!OCSP_REQ_CTX_set1_req(reqctx, req))
+			ABORT_FINALIZE(RS_RET_NO_ERRCODE);
+
+		OCSP_sendreq_nbio(&rsp, reqctx);
+		rv = OCSP_response_status(rsp);
+		if (rv != OCSP_RESPONSE_STATUS_SUCCESSFUL)
+			ABORT_FINALIZE(RS_RET_NO_ERRCODE);
+
+		OCSP_BASICRESP *bs = NULL;
+		bs = OCSP_response_get1_basic(rsp);
+		if (bs == NULL)
+			ABORT_FINALIZE(RS_RET_NO_ERRCODE);
+
+		if (!OCSP_basic_verify(bs, sk, store, OCSP_TRUSTOTHER))
+			ABORT_FINALIZE(RS_RET_NO_ERRCODE);
+
+		long nsec = (5 * 60);
+		long maxage = -1;
+		for (int i = 0; i < sk_OCSP_CERTID_num(ids); i++) {
+			int status, reason;
+
+			ASN1_GENERALIZEDTIME *rev, *thisupd, *nextupd;
+			id = sk_OCSP_CERTID_value(ids, i);
+
+			if (!OCSP_resp_find_status(bs, id, &status, &reason,
+				&rev, &thisupd, &nextupd)) {
+				continue;
+			}
+			if (!OCSP_check_validity(thisupd, nextupd, nsec, maxage))
+				ABORT_FINALIZE(RS_RET_NO_ERRCODE);
+			if (status == V_OCSP_CERTSTATUS_GOOD) {
+				continue;
+			} else if (status == V_OCSP_CERTSTATUS_REVOKED) {
+				ABORT_FINALIZE(RS_RET_NO_ERRCODE);
+			}
+		}
+
+finalize_it:
+		if (iRet != RS_RET_OK) {
+			if (host) {
+				LogError(0, RS_RET_CERT_INVALID, "Error: Querying OCSP Responder \"%s\" failed!", host);
+				osslLastSSLErrorMsg(0, NULL, RS_RET_CERT_INVALID, "osslOCSPREQ");
+			}
+		} else {
+			if (host)
+				dbgprintf("osslOCSPREQ: OCSP check from \"%s\" successful!\n", host);
+		}
+
+		BIO_free_all(bio);
+		OCSP_RESPONSE_free(rsp);
+		OCSP_REQUEST_free(req);
+		OPENSSL_free(host);
+		OPENSSL_free(port);
+		OPENSSL_free(path);
+		sk_OCSP_CERTID_free(ids);
+		OCSP_REQ_CTX_free(reqctx);
+
+		RETiRet;
+	}
+	default:
+		iRet = RS_RET_NO_ERRCODE;
+	}
+	RETiRet;
+}
+
+/*
+ * OCSP State Machine
+ *
+ * It first locates the issuer certficate, then sets up the Process Env, followed
+ * by poping each of the Hosts in ocsp_state->Responder
+ */
+
+rsRetVal
+osslOCSP(nsd_ossl_ocsp_t *ocsp_state)
+{
+	DEFiRet;
+
+	STACK_OF(X509) *sk = ocsp_state->Chain;
+	if (sk == NULL)
+		ABORT_FINALIZE(RS_RET_NO_ERRCODE);
+
+	STACK_OF(X509) *sk_shadow = ocsp_state->Chain_shadow;
+	if (sk_shadow == NULL)
+		ABORT_FINALIZE(RS_RET_NO_ERRCODE);
+
+
+	switch (ocsp_state->Action) {
+	case OCSP_CHECK_CERT_CHAIN:
+	{
+		/* Start of OCSP process */
+		ocsp_state->Action = OCSP_GET_ISSUER_CERTIFICATE;
+		CHKiRet(osslOCSP(ocsp_state));
+		break;
+	}
+	case OCSP_GET_ISSUER_CERTIFICATE:
+	{
+		/* Find Root CA */
+		for (int i = 0; i < sk_X509_num(sk); i++) {
+			X509 *cert = sk_X509_value(sk, i);
+			/* If subject equals issuer, must be root CA */
+			unsigned long subject_hash = X509_subject_name_hash(cert);
+			unsigned long issuer_hash =  X509_issuer_name_hash(cert);
+			if (subject_hash == issuer_hash)
+				ocsp_state->issuer = cert;
+		}
+		if (ocsp_state->issuer == NULL)
+			ABORT_FINALIZE(RS_RET_CERT_INVALID);
+		/* FALL THROUGH */
+	}
+	case OCSP_CREATE_X509_STORE:
+	{
+		ocsp_state->X509store = X509_STORE_new();
+		for (int i = 0; i < sk_X509_num(sk); i++)
+			X509_STORE_add_cert(ocsp_state->X509store, sk_X509_value(sk, i));
+		/* FALL THROUGH */
+	}
+	case OCSP_PARSE_RESPONDERS:
+	{
+		X509 *cert = sk_X509_value(sk_shadow, 0);
+		if (cert == NULL)
+			FINALIZE;
+
+		nsd_ossl_ocsp_request_t *request_state = &ocsp_state->RequestState;
+		request_state->Responder = X509_get1_ocsp(cert);
+		if (request_state->Responder == NULL) {
+			sk_X509_pop(sk_shadow);
+			ocsp_state->Action = OCSP_PARSE_RESPONDERS;
+			CHKiRet(osslOCSP(ocsp_state));
+			break;
+		}
+		/* FALL THROUGH */
+	}
+	case OCSP_QUERY_RESPONDERS:
+	{
+		X509 *cert = sk_X509_value(sk_shadow, 0);
+		nsd_ossl_ocsp_request_t *request_state = &ocsp_state->RequestState;
+		request_state->Action = OCSPREQ_BASIC_VALIDATION;
+		request_state->issuer = ocsp_state->issuer;
+		request_state->cert = cert;
+		request_state->sk = ocsp_state->Chain;
+		request_state->X509store = ocsp_state->X509store;
+		CHKiRet(osslOCSPREQ(request_state));
+		sk_X509_pop(sk_shadow);
+		ocsp_state->Action = OCSP_PARSE_RESPONDERS;
+		CHKiRet(osslOCSP(ocsp_state));
+		/* FALL THROUGH */
+	}
+	}
+
+finalize_it:
+	if (iRet != RS_RET_OK) {
+		LogError(0, RS_RET_CERT_INVALID, "Error: OCSP certificate chain check failed!");
+		osslLastSSLErrorMsg(0, NULL, RS_RET_CERT_INVALID, "osslOCSP");
+	} else {
+		dbgprintf("osslOCSP: Certificate Chain checked!\n");
+	}
+	if (ocsp_state->X509store) {
+		X509_STORE_free(ocsp_state->X509store);
+		ocsp_state->X509store = NULL;
+	}
+
+	RETiRet;
+}
+/* Do OCSP Client Check */
+rsRetVal
+osslOCSPCheck(nsd_ossl_t *pNsd)
+{
+	DEFiRet;
+
+	/* Get Cert Chain */
+	STACK_OF(X509) *sk = SSL_get_peer_cert_chain(pNsd->ssl);
+	if (sk == NULL)
+		FINALIZE;
+
+	STACK_OF(X509) *sk_shadow = sk_X509_dup(sk);
+	if (sk_shadow == NULL)
+		ABORT_FINALIZE(RS_RET_NO_ERRCODE);
+
+	nsd_ossl_ocsp_t ocsp_state;
+	ocsp_state.Chain = sk;
+	ocsp_state.Chain_shadow = sk_shadow;
+	ocsp_state.Action = OCSP_CHECK_CERT_CHAIN;
+	CHKiRet(osslOCSP(&ocsp_state));
+
+finalize_it:
+	if (iRet != RS_RET_OK) {
+		LogError(0, RS_RET_CERT_INVALID, "Error: OCSP check failed!");
+		osslLastSSLErrorMsg(0, NULL, RS_RET_CERT_INVALID, "osslOCSPCheck");
+	} else {
+		dbgprintf("osslOCSPCheck: Successful!\n");
+	}
+
+	RETiRet;
+}
 
 /* Perform all necessary checks after Handshake
  */
@@ -1435,6 +1686,9 @@
 		}
 	}
 
+	/* OCSP */
+	CHKiRet(osslOCSPCheck(pNsd));
+
 	/* Do post handshake stuff */
 	CHKiRet(osslPostHandshakeCheck(pNsd));
 
--- a/runtime/nsd_ossl.h
+++ b/runtime/nsd_ossl.h
@@ -132,5 +132,33 @@
 
 /* the name of our library binary */
 #define LM_NSD_OSSL_FILENAME "lmnsd_ossl"
+struct nsd_ossl_ocsp_request_s {
+	int Action;
+	STACK_OF(OPENSSL_STRING) *Responder;
+	X509_STORE *X509store;
+	X509 *issuer;
+	X509 *cert;
+	STACK_OF(X509) *sk;
+};
+
+struct nsd_ossl_ocsp_s {
+	int Action;
+	X509 *issuer;
+	STACK_OF(X509) *Chain;
+	STACK_OF(X509) *Chain_shadow;
+	X509_STORE *X509store;
+	nsd_ossl_ocsp_request_t RequestState;
+};
+
+/* The state machine actions for OCSP */
+#define OCSP_CHECK_CERT_CHAIN 0x1
+#define OCSP_GET_ISSUER_CERTIFICATE 0x2
+#define OCSP_CREATE_X509_STORE 0x3
+#define OCSP_PARSE_RESPONDERS 0x4
+#define OCSP_QUERY_RESPONDERS 0x5
+#define OCSP_FINALIZE 0x6
+
+#define OCSPREQ_BASIC_VALIDATION 0x1
+#define OCSPREQ_BASIC_NOVALIDATION 0x2
 
 #endif /* #ifndef INCLUDED_NSD_OSSL_H */
--- a/runtime/typedefs.h
+++ b/runtime/typedefs.h
@@ -60,6 +60,8 @@
 typedef struct nsd_ossl_s nsd_ossl_t;
 typedef struct nsd_gsspi_s nsd_gsspi_t;
 typedef struct nsd_nss_s nsd_nss_t;
+typedef struct nsd_ossl_ocsp_s nsd_ossl_ocsp_t;
+typedef struct nsd_ossl_ocsp_request_s nsd_ossl_ocsp_request_t;
 typedef struct nsdsel_ptcp_s nsdsel_ptcp_t;
 typedef struct nsdsel_gtls_s nsdsel_gtls_t;
 typedef struct nsdsel_ossl_s nsdsel_ossl_t;
